/*
 * Copyright (c) 2020, https://github.com/911992 All rights reserved.
 * License BSD 3-Clause (https://opensource.org/licenses/BSD-3-Clause)
 */

 /*
WAsys_pojo_http_data
File: Fillable_Object.java
Created on: May 13, 2020 1:17:53 AM
    @author https://github.com/911992
 
History:
    0.1.3(20200521)
        • Updated the header(this comment) part
        • Added some javadoc
        • Set the default err message gen to false

    initial version: 0.1(20200510)
 */
package wasys.lib.pojo_http_data.api;

import java.io.InputStream;

/**
 * Defines a fillable POJO object.
 * <p>
 * Any POJO wish to be a fillable type should implement this interface(or its adapters).
 * It contains required methods to be implemented to track the correct state of a filled POJO by the filler module.
 * </p>
 * @author https://github.com/911992
 * @see Fillable_Object_Adapter
 * @see Poolable_Fillable_Object_Adapter
 * @see Poolable_Object
 */
public interface Fillable_Object {

    /**
     * Specifies the type parsing mode.
     * This method is called <b>once</b>, <b>if and if</b> the implementer type has not annotated by {@link No_Param}, otherwise for each filling op, type will be parsed again.
     * If the parse mode is set to {@code Reflection_Type_Fields}, so it means the parser should find and parse the fields need to be fill at runtime(once) using reflection(type scraping)
     * Else if it's {@code Type_Manipulator}, so the parser will call the {@code get_type_descriptor(void):Fillable_Object_Manipulator} that should return a nun null @{code Fillable_Object_Manipulator} instance that explains the type manually by user
     * 
     * By default it return {@code Reflection_Type_Fields}
     * @see Fillable_Object_Manipulator
     * @return type parsing mode
     */
    default public Object_Fill_Mode fill_mode() {
        return Object_Fill_Mode.Reflection_Type_Fields;
    }

    /**
     * Specifies the part(file upload) streaming mode for each stream-able({@code OutputStream}) field.
     * This method is called <b>after</b> method {@code prepare_for_part} is called to ask how does the part(which has triggered to {@code prepare_for_part} method) should be treated(streamed)
     * By default, it returns {@code Stream_To_Field} which means trying to stream the part data to the related output stream(if not null)
     * If user wishes to perform different io op over part input stream, so {@code Pass_Stream} should be returned which inform the filler to pass the part input stream to the POJO ({@code part_stream} method)
     * <b>Note:</b> If the POJO has 3 associated part({@code OutputStream}) parameter, so for each part, this method will be called(not once for all)
     * 
     * @return the part streaming mode need to be applied
     */
    default public Part_Field_Stream_Mode part_io_stream_mode() {
        return Part_Field_Stream_Mode.Stream_To_Field;
    }

    /**
     * Indicates if the filler is allowed to call {@code set_field_fill_result_err_msg} when failed fill event happened.
     * Filler asks is once for each fill operation, not for each field.
     * The message generated by the filler may be vary, or no any error message at all.
     * Please check {@code set_field_fill_result_err_msg()} method
     * @return {@code true} if POJO wishes for default error message generation
     */
    default public boolean generate_result_err_msg() {
        return false;
    }

    /**
     * Event by filler to POJO, to indicate the overall instance-level filling result.
     * This method is called by the filler, at the end of fields filling, to state the overall instance-level filling result
     * Any failure about a field setting will result the object filling result as failed too
     * For duplicated inner-types also, filler will set the {@code Ignorred_Duplicated_Type} as {@code arg_success} value
     * @param arg_success 
     */
    default public void set_object_fill_result(Object_Fill_Result arg_success) {
    }

    /**
     * Field failed data setting event.
     * This method is called when a field setting result is failed. by "fail" it means it violets the POJO required data/state, for example null data for a non-null field, or invalid number format for a int field.
     * This method is called before {@code set_field_fill_result_err_msg()} method, if parser default err message is desired
     * <b>Note:</b> For a <u>success</u> field set(assuming correct/expected data, and or null for a nullable field), this method <u>will not</u> be called.
     * @param arg_param_name the parameter name from http data
     * @param arg_idx index of parameter data
     * @param arg_result the reason about the fail (always a failed one, never a success result)
     */
    default public void set_field_fill_result(String arg_param_name, int arg_idx, Field_Fill_Result arg_result) {
    }

    /**
     * Field failed data setting generated error message.
     * This method is called after {@code set_field_fill_result()} method, if POJO responded {@code true} by {@code generate_result_err_msg()} method
     * Default parser({@link Generic_Object_Filler}) produces the error messages as following(excluding the double-quotes):
     *  • When data is missed: "Missed(empty) data"
     *  • When data is out of range: "Out of range value(min: min_val , max: max_val )"
     *  • When data decode(parse) failed: "Bad data format"
     * @param arg_param_name The parameter name from http data
     * @param arg_idx index of parameter data
     * @param arg_err_mes human friendly error message(s) that explains the reason of failure(excluding the field and parameter info)
     */
    default public void set_field_fill_result_err_msg(String arg_param_name, int arg_idx, String arg_err_mes[]) {
    }

    /**
     * Returns POJO type descriptor.
     * This method is called, if the POJO returns {@code Type_Manipulator} by @{code fill_mode} method.
     * The implemented {@code Fillable_Object_Manipulator} should provide the appreciated POJO field signature
     * Filler may(by default filler) or may not check the provided POJO signature, to avoid further exceptions
     * A POJO would introduce its signature using @{code Type_Manipulator} mode, but asks the filler for reflection(auto mode)
     * By default it returns a {@code null} value, as the default value for {@code fill_mode} is set to {@code Reflection_Type_Fields}
     * @return a {@code null} value if parsing using reflection is desired, or a non-null {@code Fillable_Object_Manipulator} instance that explains about the POJO type
     * @see {@code fill_mode}
     */
    default public Fillable_Object_Manipulator get_type_descriptor() {
        return null;
    }

    /**
     * This method is called when a stream(file-upload/part) data need to be happened.
     * For any data file/part streaming, filler surely calls this method to inform the POJO, an upcoming file upload is on the way, so POJO could prepare some business before that
     * A POJO could have a {@code OutputStream} with value {@code null} to just inform filler/parser a file upload is required, and when file is present, parser calss this method before reald io op. user now be able to initialize the stream to a real non-null object.
     * This method is called before {@code part_stream} method
     * @param arg_param_name the name of the http parameter name
     * @param arg_param_idx index of the parameter
     * @param arg_part_filename file/part name of the form data, null if not available
     * @param arg_part_size size of the file upload
     * @param arg_part_mime mime type of the file if possible
     * @return {@code true} if filler need to proceed to the next streaming op, or {@code false} if the file stream should be skipped
     */
    default public boolean prepare_for_part(String arg_param_name, int arg_param_idx, String arg_part_filename, long arg_part_size, String arg_part_mime) {
        return true;
    }

    /**
     * Processes the given input stream, related to a part/file-upload of related http request.
     * This method is called by filler, after POJO returned {@code true} on {@code prepare_for_part} method, and wished to do the io process by its own, by returning {@code Pass_Stream} by {@code part_io_stream_mode} method
     * Any exception should be handled, otherwise the rest of the fill op may be failed.
     * 
     * @param arg_param_name name of the http parameter (form-data)
     * @param arg_idx index of the parameter
     * @param arg_part_stream including the data related to file of http form data(probably buffered)
     */
    default public void part_stream(String arg_param_name, int arg_idx, InputStream arg_part_stream) {
    }

}
